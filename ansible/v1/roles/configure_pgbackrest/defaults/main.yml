---
## Manifest
#instance_name: spot
#postgres_version: 16
#backup:
#  type: pgbackrest
#  wal_archiving_max_interval: 1min   # Postgres archive_timeout i.e. a typical "data-loss window" on instance termination
#                               # when using local / volatile disks. Very short values (minimum is 1s) can bloat your
#                               # backup archive and a streaming replication or WAL receiver setup could be a better fit.
## PS Below backup_* settings only affect repo1 - multi-repo is possible though via pgbackrest_global_settings
#  retention_days: 3  # Snapshots according to the below schedule + WAL for PITR in that window
#  schedule_full: "0 3 * * 1,3,5"
#  schedule_diff: "0 3 * * 0,2,4,6"  # Comment out to disable differential backups
#  encryption: false
#  cipher_password:  # Not recommended to set on env level. Supports Ansible vault encrypted strings
#  cipher_password_file: ~/.pg-spot-operator/backup_cipher_password  # Plain text file accessible on the engine if don't want to use vault
#  s3_key:
#  s3_key_secret:
#  s3_key_file: ~/.aws/credentials_s3_key  # For dev
#  s3_key_secret_file: ~/.aws/credentials_s3_key_secret  # For dev
#  s3_bucket:  # If not set created with following naming: pgspotops-{instance_name}
#  pgbackrest:
#    global_settings:
#      repo1-type: s3
#      repo1-s3-region: eu-north-1
#      repo1-s3-endpoint: s3.eu-north-1.amazonaws.com
#    archive_push_overrides:
#      compress-level: 1  # To avoid possible WAL build-up on large DML
#    backup_overrides:
#    restore_overrides:

# Not exposed
postgres_cluster_name: "{{ instance_name | d('cluster1') | replace('-', '_') }}"  # Dashes don't work with pg_createcluster
stanza_name: "{{ instance_name | d('cluster1') }}"
postgres_archiving_settings:
  - "archive_command = 'pgbackrest --stanza={{ stanza_name }} archive-push %p'"
  - "archive_mode = on"
  - "archive_timeout = {{ backup.wal_archiving_max_interval | d('5min')}}"
