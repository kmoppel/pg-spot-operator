---
- block:
  - name: Assert admin pass
    ansible.builtin.assert:
      that: postgres.admin_password|d('')
      quiet: true
    when: postgres.admin_user|d('')

  - name: Ensure postgres started
    ansible.builtin.service: name=postgresql state=started

  - name: Create the "app" user if requested
    become: yes
    become_user: postgres
    community.postgresql.postgresql_user:
      state: present
      name: "{{ postgres.admin_user }}"
      password: "{{ postgres.admin_password }}"
      role_attr_flags: "{{ postgres.admin_is_superuser | d(False) | ternary('SUPERUSER', 'NOSUPERUSER,CREATEDB,CREATEROLE') }}"
      login_host: /var/run/postgresql
      login_port: "5432"
    when: postgres.admin_user | d('') | length > 0

  - name: Create the "app" user if requested
    become: yes
    become_user: postgres
    community.postgresql.postgresql_privs:
      database: postgres
      type: group
      role: "{{ postgres.admin_user }}"
      objs: >-
        {{ non_su_roles_17 if postgres_version|int >= 17
          else  non_su_roles_16 if postgres_version|int >= 16
          else non_su_roles_15 if postgres_version|int >= 15
          else non_su_roles_14 }}
      login_host: /var/run/postgresql
      login_port: "5432"
    when: not postgres.admin_is_superuser|d(False)

  - name: Add DB privs to non-superuser
    become: yes
    become_user: postgres
    community.postgresql.postgresql_privs:
      database: postgres
      type: database
      role: "{{ postgres.admin_user }}"
      privs: ALL
      login_host: /var/run/postgresql
      login_port: "5432"
    when: not postgres.admin_is_superuser|d(False) and item
    loop:
      - 'postgres'
      - "{{ postgres.app_db_name | d('') }}"

  - name: Add PUBLIC schema privs to non-superuser
    become: yes
    become_user: postgres
    community.postgresql.postgresql_query:
      db: "{{ item }}"
      login_host: /var/run/postgresql
      login_port: "5432"
      query: "GRANT ALL ON SCHEMA PUBLIC TO {{ postgres.admin_user }}"
    when: item
    loop:
      - 'postgres'
      - "{{ postgres.app_db_name | d('') }}"

  when: postgres.admin_user | d('')

- name: Create the "app" DB if requested
  become: true
  become_user: postgres
  community.postgresql.postgresql_db:
    state: present
    name: "{{ postgres.app_db_name }}"
    owner: "{{ postgres.admin_user | default('') or 'postgres' }}"
    template: template1
    login_host: /var/run/postgresql
    login_port: "5432"
  when: postgres.app_db_name | d('') | length > 0

- name: Add user listed extensions to the default or app db
  become: true
  become_user: postgres
  community.postgresql.postgresql_ext:
    db: "{{ postgres.app_db_name | d('') or 'postgres' }}"
    name: "{{ item }}"
    login_host: /var/run/postgresql
    login_port: "5432"
    cascade: true
  loop: "{{ postgres.extensions }}"
  when: postgres.extensions | d([])
